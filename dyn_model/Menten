import argparse
import numpy as np
import networkx as nx
import pickle
import time
import sys
import pandas as pd
import math
from scipy.integrate import odeint
import matplotlib.pyplot as plt
# 一些参数的配置
parser = argparse.ArgumentParser()
parser.add_argument('--node_num', type=int, default=100, help='Number of nodes, default=1500')
parser.add_argument('--sys', type=str, default='Menten', help='simulated system to model, default=sim')
parser.add_argument('--dims', type=int, default=1, help='dims of nodes, default=2')
parser.add_argument('--times', type=int, default=200, help='一共采样多少次, default=5000')
parser.add_argument('--samples', type=int, default=10, help='每次采样多少步, default=5000')
parser.add_argument('--network', type=str, default='Gene', help='network, default=ER')
parser.add_argument('--BA_edge', type=int, default=2, help='num of edges added each time,default=2')
parser.add_argument('--Ws_Nei', type=int, default=4, help='WS neibours,default=4')
parser.add_argument('--Ws_P', type=float, default=0.3, help='WS P,default=0.3')
parser.add_argument('--Er_P', type=float, default=0.4, help='ER P,default=0.04')
parser.add_argument('--e_times', type=int, default=100, help='执行多少次,default=4')
parser.add_argument('--dt', type=float, default=0.01, help='ER P,default=0.04')
args = parser.parse_args()

def generate_network():
    dg = nx.DiGraph()
    # add nodes
    for i in range(100):
        dg.add_node(i)
    path = './data/insilico_size100_3_goldstandard.tsv'
    # 读取文件

    df = pd.read_csv(path, header=None, sep='\t')

    for i in range(len(df)):
        if(int(df.at[i,2])!=0):
            first = int(df.at[i,0].lstrip('G')) - 1
            second = int(df.at[i,1].lstrip('G')) - 1
            dg.add_edge(first, second)
    print('生成的是基因网')
    print(len(dg.edges()))
    return dg


#计算每个节点的入度
def cal_degree(matrix):
    return np.sum(matrix,axis=0)



#找到每个节点和他相连的邻居
# return:{0:[1,2,3],1:[0,4]...}
def get_innode(adj):
	innodes = {}
	for i in range(adj.shape[0]):
		innode = []
		for j in range(adj.shape[0]):
			if adj[j][i] == 1:
				innode.append(j)
		innodes[i] = innode
	return innodes


def michaelis_menten(y,t,kesi):
    dydt = np.zeros((y.shape[0],))
    #J = np.loadtxt('Data/connectivity.dat')
    k = edges.shape[0]

    for i in range(k):
        if Ni[i]==0:
            #print('节点度为0'+str(i))
            dydt[i] = -y[i] + kesi[i]
        else:
            sum=0.0
            for j in neibour[i]:
                sum += (edges[j][i] * (y[j]/(1+y[j])))
            dydt[i] = -y[i] + sum*(1/Ni[i]) + kesi[i]

    return(dydt)


def generate_data():

    #smpling rate of time series
    print('Simulating time series...')
    Y = np.array([])
    resolution=1

    for s in range(args.times):
        if(s % 100==0):
            print('数据已经生成：'+str(s*10))
        kesi_array = np.random.normal(loc=0,scale=1e-5,size=args.node_num)
        init = 1+np.random.uniform(0.,1.,size=(args.node_num,))
        tspan=np.arange(0,args.samples,resolution)
        y = odeint(michaelis_menten, init, tspan,args=(kesi_array,))
        Y = np.vstack((Y,y)) if Y.size else y

    new_data = Y[:,:,np.newaxis]

    print('Simulation finished!')
    print(new_data.shape)

    results = [edges, new_data]
    data_path =  './data/gene.pickle'

    with open(data_path, 'wb') as f:
        pickle.dump(results, f)



graph = generate_network()
# 生成对应的邻接矩阵
edges = nx.adjacency_matrix(graph).toarray()
# 每个节点的入度
Ni = cal_degree(edges)
print(Ni)
# 每个节点的邻居
neibour = get_innode(edges)
print('开始生成数据')
start_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
print('start_time:', start_time)
generate_data()
print('数据生成完成')
end_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
print('end_time:', end_time)
# print('time for generate data:' + str(round(end_time - start_time, 2)))
